# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightly.ai
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from lightly.openapi_generated.swagger_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class DatasourceConfigS3(
    ComposedSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    @classmethod
    @property
    @functools.cache
    def _composed_schemas(cls):
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        
        
        class allOf_1(
            DictSchema
        ):
            _required_property_names = set((
            ))
        
            @classmethod
            @property
            def s3Region(cls) -> typing.Type['S3Region']:
                return S3Region
            
            
            class s3AccessKeyId(
                _SchemaValidator(
                    min_length=1,
                ),
                StrSchema
            ):
                pass
            
            
            class s3SecretAccessKey(
                _SchemaValidator(
                    min_length=1,
                ),
                StrSchema
            ):
                pass
        
            @classmethod
            @property
            def s3ServerSideEncryptionKMSKey(cls) -> typing.Type['S3ServerSideEncryptionKMSKey']:
                return S3ServerSideEncryptionKMSKey
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict, ],
                s3ServerSideEncryptionKMSKey: typing.Union['S3ServerSideEncryptionKMSKey', Unset] = unset,
                _configuration: typing.Optional[Configuration] = None,
                **kwargs: typing.Type[Schema],
            ) -> 'allOf_1':
                return super().__new__(
                    cls,
                    *args,
                    s3ServerSideEncryptionKMSKey=s3ServerSideEncryptionKMSKey,
                    _configuration=_configuration,
                    **kwargs,
                )
        return {
            'allOf': [
                DatasourceConfigBase,
                allOf_1,
            ],
            'oneOf': [
            ],
            'anyOf': [
            ],
            'not':
                None
        }

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, str, date, datetime, int, float, decimal.Decimal, None, list, tuple, bytes],
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'DatasourceConfigS3':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from lightly.openapi_generated.swagger_client.model.datasource_config_base import DatasourceConfigBase
