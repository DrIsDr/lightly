# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightly.ai
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from lightly.openapi_generated.swagger_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class SampleMetaData(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    custom = DictSchema
    dynamic = DictSchema
    sharpness = NumberSchema
    sizeInBytes = IntSchema
    snr = NumberSchema
    
    
    class mean(
        ListSchema
    ):
        
        
        class _items(
            _SchemaValidator(
            ),
            NumberSchema
        ):
            pass
    
    
    class shape(
        ListSchema
    ):
        
        
        class _items(
            _SchemaValidator(
            ),
            IntSchema
        ):
            pass
    
    
    class std(
        ListSchema
    ):
        
        
        class _items(
            _SchemaValidator(
            ),
            NumberSchema
        ):
            pass
    
    
    class sumOfSquares(
        ListSchema
    ):
        
        
        class _items(
            _SchemaValidator(
            ),
            NumberSchema
        ):
            pass
    
    
    class sumOfValues(
        ListSchema
    ):
        
        
        class _items(
            _SchemaValidator(
            ),
            NumberSchema
        ):
            pass


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        custom: typing.Union[custom, Unset] = unset,
        dynamic: typing.Union[dynamic, Unset] = unset,
        sharpness: typing.Union[sharpness, Unset] = unset,
        sizeInBytes: typing.Union[sizeInBytes, Unset] = unset,
        snr: typing.Union[snr, Unset] = unset,
        mean: typing.Union[mean, Unset] = unset,
        shape: typing.Union[shape, Unset] = unset,
        std: typing.Union[std, Unset] = unset,
        sumOfSquares: typing.Union[sumOfSquares, Unset] = unset,
        sumOfValues: typing.Union[sumOfValues, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'SampleMetaData':
        return super().__new__(
            cls,
            *args,
            custom=custom,
            dynamic=dynamic,
            sharpness=sharpness,
            sizeInBytes=sizeInBytes,
            snr=snr,
            mean=mean,
            shape=shape,
            std=std,
            sumOfSquares=sumOfSquares,
            sumOfValues=sumOfValues,
            _configuration=_configuration,
            **kwargs,
        )
