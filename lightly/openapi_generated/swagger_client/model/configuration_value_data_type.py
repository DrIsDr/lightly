# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightly.ai
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from lightly.openapi_generated.swagger_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class ConfigurationValueDataType(
    _SchemaEnumMaker(
        enum_value_to_name={
            "NUMERIC_INT": "NUMERIC_INT",
            "NUMERIC_FLOAT": "NUMERIC_FLOAT",
            "CATEGORICAL_STRING": "CATEGORICAL_STRING",
            "CATEGORICAL_INT": "CATEGORICAL_INT",
            "CATEGORICAL_BOOLEAN": "CATEGORICAL_BOOLEAN",
            "CATEGORICAL_DATETIME": "CATEGORICAL_DATETIME",
            "CATEGORICAL_TIMESTAMP": "CATEGORICAL_TIMESTAMP",
            "OTHER_STRING": "OTHER_STRING",
        }
    ),
    StrSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    We support different data types for the extracted value. This tells Lightly how to interpret the value and also allows you to do different things.
- Numeric means the extracted values are in a range and have a lower and upper bound. E.g used for color ranges
- Categorical means the extracted values are distinct and can be grouped. This allows us to e.g plot distributions of each unique value within your dataset and to map each unique value to a color 
  - string: most often used for class/category e.g for city, animal or weather condition
  - int: e.g for ratings of a meal
  - boolean: for true/false distinctions as e.g isVerified or flashOn
  - datetime: e.g for grouping by time
  - timestamp: e.g for grouping by time
- Other means that the extracted value is important to you but does not fit another category. It is displayed alongside other information in the sample detail. E.g the license

    """
    
    @classmethod
    @property
    def NUMERIC_INT(cls):
        return cls._enum_by_value["NUMERIC_INT"]("NUMERIC_INT")
    
    @classmethod
    @property
    def NUMERIC_FLOAT(cls):
        return cls._enum_by_value["NUMERIC_FLOAT"]("NUMERIC_FLOAT")
    
    @classmethod
    @property
    def CATEGORICAL_STRING(cls):
        return cls._enum_by_value["CATEGORICAL_STRING"]("CATEGORICAL_STRING")
    
    @classmethod
    @property
    def CATEGORICAL_INT(cls):
        return cls._enum_by_value["CATEGORICAL_INT"]("CATEGORICAL_INT")
    
    @classmethod
    @property
    def CATEGORICAL_BOOLEAN(cls):
        return cls._enum_by_value["CATEGORICAL_BOOLEAN"]("CATEGORICAL_BOOLEAN")
    
    @classmethod
    @property
    def CATEGORICAL_DATETIME(cls):
        return cls._enum_by_value["CATEGORICAL_DATETIME"]("CATEGORICAL_DATETIME")
    
    @classmethod
    @property
    def CATEGORICAL_TIMESTAMP(cls):
        return cls._enum_by_value["CATEGORICAL_TIMESTAMP"]("CATEGORICAL_TIMESTAMP")
    
    @classmethod
    @property
    def OTHER_STRING(cls):
        return cls._enum_by_value["OTHER_STRING"]("OTHER_STRING")
